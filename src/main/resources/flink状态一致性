一、什么是状态一致性
1、有状态的刘处理，内部每个算子任务都可以有自己都状态
2、对于流处理器内部来说，所谓都状态一致性，其实就是我们所说的计算结果要保证准确
3、一条数据不应该丢失，也不应该重复计算
4、在遇到故障时可以恢复状态，恢复以后的重新计算，结果应该也是完全正确

二、状态一致性分类
1、AT-MOST-ONCE(最多一次)
    当任务故障时，最简单的做法是什么都不干，既不恢复丢失都状态，也不重播丢失都数据，AT-MOST-ONCE语义的含义是最多处理一次数据
2、AT-LEAST-ONCE（至少一次）
    在大多数的真实应用场景，我们希望不丢失事件，这种类型的保障称为AT-LEAST-ONCE，意思是所有的事件都得到了处理，而一些事件还可能被处理多次
3、EXACTLY-ONCE（精确一次）
    恰好处理一次是最严格的保证，也是最难实现的。恰好处理一次语义不仅仅意味着事件丢失，还意味着针对每一个数据，内部状态仅仅更新一次

三、端到端（end-to-end）状态一致性
1、目前我们看到的一致性保证都是由流处理器实现的，也就是说都是在Flink流处理器内部保证的；而在真实应用中，流处理应用除了流处理器
    以外还包含了数据源（例如kafka）和输出到持久化系统
2、端到端的一致性保证，意味着结果的正确性贯穿了整个流处理应用的始终，每一个组件都保证了它自己的一致性
3、整个端到端的一致性级别取决于所有组件中一致性最弱的组件

四、端到端exectly-once
1、内部保证：checkpoint
2、source端：可重置数据的读取位置
3、sink端：从故障恢复时，数据不会重复写入外部系统
    （1）幂等写入：一个操作，可以重复执行很多次，但只导致一次结果更改，也就是说，后面在重复执行就不起作用
    （2）事务写入：
    （3）预写日志（WAL）：
    （4）两阶段提交（Two-phase-commit,2PC）
        - 对于每个checkpoint，sink任务会启动一个事务，并将接下来所有接收的数据添加到事务里
        - 然后将这些数据写入外部sink系统，但不提交他们 -- 这时只是"预提交"
        - 当它收到checkpoint完成但通知时，它才正式提交事务，实现结果的真正写入
        - 这种方式真正实现了exactly-once，它需要一个提供事务支持的外部sink系统，flink提供了TwoPhaseCommitSinkFunction接口



